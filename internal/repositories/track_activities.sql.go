// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: track_activities.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createTrackActivities = `-- name: CreateTrackActivities :exec
INSERT INTO track_activities(user_id, track_id, is_liked)
VALUES (
  $1, $2, $3
)
RETURNING id, user_id, track_id, is_liked, created_at, updated_at
`

type CreateTrackActivitiesParams struct {
	UserID  uuid.UUID
	TrackID string
	IsLiked bool
}

func (q *Queries) CreateTrackActivities(ctx context.Context, arg CreateTrackActivitiesParams) error {
	_, err := q.db.ExecContext(ctx, createTrackActivities, arg.UserID, arg.TrackID, arg.IsLiked)
	return err
}

const getTrackActivitiesForTracks = `-- name: GetTrackActivitiesForTracks :many
SELECT id, user_id, track_id, is_liked, created_at, updated_at 
FROM track_activities
WHERE user_id = $1 AND track_id = ANY($2::text[])
`

type GetTrackActivitiesForTracksParams struct {
	UserID   uuid.UUID
	TrackIDs []string
}

func (q *Queries) GetTrackActivitiesForTracks(ctx context.Context, arg GetTrackActivitiesForTracksParams) ([]TrackActivity, error) {
	rows, err := q.db.QueryContext(ctx, getTrackActivitiesForTracks, arg.UserID, pq.Array(arg.TrackIDs))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackActivity
	for rows.Next() {
		var i TrackActivity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrackID,
			&i.IsLiked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackActivity = `-- name: GetTrackActivity :one
SELECT id, user_id, track_id, is_liked, created_at, updated_at
FROM track_activities
WHERE user_id = $1 AND track_id = $2
`

type GetTrackActivityParams struct {
	UserID  uuid.UUID
	TrackID string
}

func (q *Queries) GetTrackActivity(ctx context.Context, arg GetTrackActivityParams) (TrackActivity, error) {
	row := q.db.QueryRowContext(ctx, getTrackActivity, arg.UserID, arg.TrackID)
	var i TrackActivity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.IsLiked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTrackActivities = `-- name: UpdateTrackActivities :exec
UPDATE track_activities
SET is_liked = $3, updated_at = NOW()
WHERE user_id = $1 AND track_id = $2
RETURNING id, user_id, track_id, is_liked, created_at, updated_at
`

type UpdateTrackActivitiesParams struct {
	UserID  uuid.UUID
	TrackID string
	IsLiked bool
}

func (q *Queries) UpdateTrackActivities(ctx context.Context, arg UpdateTrackActivitiesParams) error {
	_, err := q.db.ExecContext(ctx, updateTrackActivities, arg.UserID, arg.TrackID, arg.IsLiked)
	return err
}
